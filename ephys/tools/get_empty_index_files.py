"""
This is a tool for retrieving index files from a server when the local
.index file has length of 0.


For a set of directories of related recordings, use "make_tar_files.py"
to make the lower level directories (cells), including their metadata
and included files. Those tar files can be untared into the 
directory structure made by untaring the file generated by this script.
"""

from pathlib import Path
import tarfile

import paramiko

topdir = "/Volumes/Pegasus_004/ManisLab_Data3/Edwards_Reginald/CBA_Age"

def get_remote_file(filepath):
    remoteaddress = "152.19.86.120"
    remotedatapath = "/cygdrive/g/data/Mike/DCN_CBA_pyrdata"
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.RejectPolicy)
    ssh_client.connect(
        hostname=remoteaddress, port="22", username="experimenters", password="ent$73$lab"
    )
    ssh_client.exec_command(f"cd {remotedatapath:s}")
    stdin, stdout, stderr = ssh_client.exec_command(f"ls  {remotedatapath:s}")
    output = list(stdout.readlines())
    for l in output:
        if l.startswith("2024.03"):
            print(l, end="")

    print(stderr.readlines())
    ssh_client.close()




def dir_recurse(current_dir, dirtype="day", indent=0, dirs=[], nocells: bool = False):

    if indent == 0:
        current_dir = Path(current_dir)
    if dirtype == "day":
        sw = "20"
    elif dirtype == "slice":
        sw = "slice"
    elif dirtype == "cell":
        sw = "cell"
    elif dirtype == "protocol":
        sw = "protocol"
    else:
        exit()
    files = sorted(list(current_dir.glob("*")))
    alldatadirs = [f for f in files if f.is_dir() and str(f.name).startswith(sw)]
    if nocells:
        alldatadirs = [f for f in alldatadirs if not str(f.name).startswith("cell_")]
    sp = " " * indent
    for d in alldatadirs:
        # print(f"{sp:s}Data: {str(d.name):s}")
        dirs.append(d)
        files = d.glob("*")
        for f in files:
            if f.is_file():
                dirs.append(f)
    allsubdirs = [
        f
        for f in files
        if f.is_dir() and not str(f.name).startswith(sw) and not str(f.name).startswith("0")
    ]
    if nocells:
        allsubdirs = [f for f in allsubdirs if not str(f.name).startswith("cell_")]
    indent += 2
    sp = " " * indent
    for d in allsubdirs:
        # print(f"\n{sp:s}Subdir: {str(d.name):s}")
        indent, dirs = dir_recurse(d, dirtype=dirtype, indent=indent, dirs=dirs)
    indent -= 2
    if indent < 0:
        indent = 0
    return indent, dirs


def make_tarname(topdir):
    tarname = "DaySlice"
    tarfilename = str(Path(topdir, tarname)) + ".tar"
    print(tarfilename)
    return tarfilename

indent, files = dir_recurse("/Volumes/Pegasus_004/ManisLab_Data3/Edwards_Reginald/CBA_Age", dirtype="slice", dirs=[], nocells=True)
def get_tar_info(tarfilename):
    print()
    print("=" * 80)
    with tarfile.open(tarfilename, "r") as tar:
        tar.list(verbose=True)
    print()
    print("=" * 80)
    with tarfile.open(tarfilename, "r") as tar:
        t = tar.getmembers()
        for m in t:
            print(m.name, m.size)


def make_tar_day(topdir):
    tarfilename = make_tarname(topdir)
    indent, files = dir_recurse(topdir, dirtype="slice", dirs=[], nocells=True)

    with tarfile.open(tarfilename, "w") as tar:
        for f in files:
            fp = Path(*f.parts[5:])
            tar.add(f, arcname=fp, recursive=False)


def tar_main():
    topdir = "/Volumes/Pegasus_002/ManisLab_Data3/Kasten_Michael/Cerebellum"
    remote_dir = "ssh://152.198.85"
    make_tar_day(topdir)
    get_tar_info(make_tarname(topdir))

def get_empty_index_main(topdir):
    indent, files = dir_recurse(topdir, dirtype="cell", dirs=[], nocells=True)
    # print("files: ", [f.name for f in files])
    for f in files:
        if f.is_file():
            if ".index" in f.name:
                print("index file: ", f)
                print("   ", f.stat().st_size)
                if f.stat().st_size < 10:
                    print("****", f.stat().st_size)

if __name__ == '__main__':
    get_empty_index_main(topdir = topdir)
#     main()
