import argparse
import os  # legacy
import sys
import pickle
from pathlib import Path
import ephys.datareaders
import ephys.ephys_analysis as EP
import MetaArray as EM  # need to use this version for Python 3
import ephys.psc_analysis.psc_analyzer as EPP
import matplotlib
import matplotlib.colors
import matplotlib.pyplot as mpl
import numpy as np
import pandas as pd
import pylibrary.plotting.plothelpers as PH
import pylibrary.tools.cprint as CP
from pylibrary.tools import fileselector as FS
import pyqtgraph as pg

toppath = Path("/Volumes/Pegasus_002/ManisLab_Data3/")
history = ["Kasten_Michael/Cerebellum", "Kasten_Michael/HK_collab_ICinj", "NF107Ai32_Het", "pbmlsps", ]
hist_paths = [str(Path(toppath, h)) for h in history]
# print(hist_paths)
cprint = CP.cprint

class Check_RS(pg.QtWidgets.QWidget):
    def __init__(self, app):
        super(Check_RS, self).__init__()
        self.app = app
        self.set_window()
        self.df = pd.DataFrame()

    def getProtocolDir(self, reload_last=False):
        sel = FS.FileSelector(dialogtype="dir", startingdir=hist_paths[0], useNative=False, history=hist_paths)
        current_filename = Path(sel.fileName)
        if current_filename.name.startswith("20"):
            self.check_day_rs(current_filename)
            print("by day")
        elif current_filename.name.startswith("slice_"):
            print("by slice")
            self.check_slice_rs(current_filename)
        elif current_filename.name.startswith("cell_"):
            print("by cell")
            self.check_cell_rs(current_filename)
        else:
            self.check_topdir_rs(current_filename)


        self.quit()

    def set_window(self, parent=None):
        super(Check_RS, self).__init__(parent=parent)
        self.win = pg.GraphicsLayoutWidget(title="MiniViewer")
        layout = pg.Qt.QtWidgets.QGridLayout()
        layout.setSpacing(8)
        self.win.setLayout(layout)
        self.win.resize(1280, 800)
        self.win.setWindowTitle("No File")
        self.buttons = pg.Qt.QtWidgets.QGridLayout()

    def quit(self):
        exit(0)

    def check_rs(self, protocol, clamp="MultiClamp1.ma", verbose=False):
        """
        Read the compensation settings from the data file
        Print out Rs values when they have changed WITHIN A PROTOCOL.
        Save the resulting compensation parameters in a dict for later.
        """
        AR = ephys.datareaders.acq4_reader.acq4_reader(Path(protocol))
        protocol = Path(protocol)
        prot_Rs = []
        protocol_reported = False
        if verbose:
            print(f"check_rs: Checking Protocol: {str(protocol):s}")
        for f in list(protocol.glob('*')):  # for all traces in protocol
            if f.is_file():
                continue
            prot_dir = Path(protocol, f, clamp)
            try:
                info = AR.getDataInfo(prot_dir)
            except:
                # cprint("r", f"Failed reading {str(prot_dir):s}, {prot_dir.is_file():b}")
                continue # unable to read .index file - may be for several reasons.
            if info is None:
                continue
            WC = AR.parseClampWCCompSettings(info)
            prot_Rs.append(WC)
        if len(prot_Rs) == 0: # can occur if the protocol has only one entry that is not in a subdirectory.
            return None
        bwc = prot_Rs[0]['WCResistance']*1e-6
        anychange = False
        maxdelta = 0.0
        for irs, w in enumerate(prot_Rs):
            wrs = w['WCResistance']*1e-6
            delta = 0.0
            if (bwc-wrs)/bwc > 0.01: # less than 1% change
                delta = 100*(bwc-wrs)/bwc
                if delta > maxdelta:
                    maxdelta = delta
                if not protocol_reported:
                    print(f"check_rs: Checked Protocol and found changes in Rs within protocol:\n  {str(protocol):s}")
                    protocol_reported = True
                print(f"    tr:{irs:3d} Rs changed from: {bwc:.2f} to: {wrs:.2f}, delta = {100*(bwc-wrs)/bwc:.1f} pct")
                bwc = wrs
                anychange=True
        WCRS = {"dir": protocol, "WC": bwc, 'maxdelta': maxdelta, 'anychange': anychange, 
                'cap': w['WCCellCap']*1e12, 'compEnabled': w['CompEnabled'],
                'compPct': w['RsCompCorrection']}
        return WCRS

    def print_rs(self, WCRS):
        """Print the accumulated data in the 'whole-cell Rs' list. The list consists of individual
            entries as dictionaries, generated by the check_rs function above.
        It is meant to be a list... :)
        """
        print(f"    {'File/Protocol':^60s}   {'Rs (Mohm)':^9s}   {'Comp Enabled':^12s}    {'Comp%':^10s}    {'RS delta %':^12s}    {'Cap (pF)':^9s}")
        for f in WCRS:
            if f is None:
                continue
            if not f['compEnabled']:
                col = 'm'
            elif f['WC'] > 30.0:
                col = 'r'
            elif f['WC'] > 20.0:
                col = 'y'
            else:
                col = 'w'
            short = str(Path(*Path(f['dir']).parts[-4:]))
            cprint(col, f"    {short:<60s}   {f['WC']:9.2f}    {str(f['compEnabled']):^12s}    {f['compPct']:^9.1f}    {f['maxdelta']:10.2f}    {f['cap']:8.1f}")
        print("Code: magenta: no compensation, red: Rs>30M, yellow: Rs>20M, white: Rs<20M, compensated")
        print("="*80)
    
    def check_slice_rs(self, slice_dir):
        """
        Given a slice directory (/Volumes/user/experiment/date.mm.yy_000/slice_nnn)
        go through all the cells and their prototocols and read the amplifier settings. 
        """
        cells = list(Path(slice_dir).glob("cell_*"))
        print(f"\n{'*'*80:s} \n{str(slice_dir):s}\n   # cells: {len(cells):d}")
        w = []
        for cell in cells:
            if cell.is_dir():
                w.append(self.check_cell_rs(Path(slice_dir, cell)))
        self.print_rs(w)


    def check_cell_rs(self, cell_dir):
        """
        Given a cell directory (/Volumes/user/experiment/date.mm.yy_000/slice_nnn/cell_mmm)
        go through all the prototocols and read the amplifier settings. 
        """
        prots = list(Path(cell_dir).glob("*"))
        prots = [p for p in prots if p.is_dir()]
        print(f"\n{'*'*80:s} \n{str(cell_dir):s}\n   # prots: {len(prots):d}")
        w = []
        for prot in prots:
            if prot.is_dir():
                w.append(self.check_rs(Path(cell_dir, prot)))
        self.print_rs(w)


    def check_day_rs(self, day_dir):
        slices = list(Path(day_dir).glob("slice_*"))
        for slice in slices:
            slp = Path(day_dir, slice)
            cells = list(Path(slp).glob("cell*"))
            for cell in cells:
                cpath = Path(slp, cell)
                self.check_cell_rs(cpath)

    def check_topdir_rs(self, top_dir):
        days = list(Path(top_dir).glob("*_00*"))
        for day in days:
            self.check_day_rs(day)



def main():
    app = pg.QtWidgets.QApplication([])
    app.setStyle("Fusion")

    CRS = Check_RS(app)
    # prevent python exception when closing window with system control
    app.aboutToQuit.connect(CRS.quit)
    CRS.set_window()
    CRS.getProtocolDir()
    if (sys.flags.interactive != 1):
        pg.QtWidgets.QApplication.instance().exec()


if __name__ == '__main__':
    main()

    