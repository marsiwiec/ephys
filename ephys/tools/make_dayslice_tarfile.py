"""
This is a tool for handling storage of acq4 files
This tool makes a single tar file that includes the metadata for each day and slice, as well as
the image/video files that may be in those directories.
The file does NOT include the individual cell subdirectories.
The name of the file is "experiment"_day_slice.tar
The tar file is put in the top level of the specified folder.

For a set of directories of related recordings, use "make_tar_files.py"
to make the lower level directories (cells), including their metadata
and included files. Those tar files can be untared into the 
directory structure made by untaring the file generated by this script.
"""

from pathlib import Path
import tarfile


def dir_recurse(current_dir, dirtype="day", indent=0, dirs=[], nocells:bool=True):

    if indent == 0:
        current_dir = Path(current_dir)
    if dirtype == "day":
        sw = "20"
    elif dirtype == "slice":
        sw="slice"
    elif dirtype == "cell":
        sw = "cell"
    else:
        exit()
    files = sorted(list(current_dir.glob("*")))
    alldatadirs = [f for f in files if f.is_dir() and str(f.name).startswith(sw)]
    if nocells:
        alldatadirs = [f for f in alldatadirs if not str(f.name).startswith("cell_")]
    sp = " " * indent
    for d in alldatadirs:
        # print(f"{sp:s}Data: {str(d.name):s}")
        dirs.append(d)
        files = d.glob("*")
        for f in files:
            if f.is_file():
                dirs.append(f)
    allsubdirs = [f for f in files if f.is_dir() and not str(f.name).startswith(sw) and not str(f.name).startswith("0")]
    if nocells:
        allsubdirs = [f for f in allsubdirs if not str(f.name).startswith("cell_")]
    indent += 2
    sp = " " * indent
    for d in allsubdirs:
        # print(f"\n{sp:s}Subdir: {str(d.name):s}")
        indent, dirs = dir_recurse(d, dirtype=dirtype, indent = indent, dirs=dirs)
    indent -= 2
    if indent < 0:
        indent = 0
    return indent, dirs

def make_tarname(topdir):
    tarname = "DaySlice"
    tarfilename = str(Path(topdir, tarname)) + ".tar"
    print(tarfilename)
    return tarfilename

def get_tar_info(tarfilename):
    print()
    print("="*80)
    with tarfile.open(tarfilename, "r") as tar:
        tar.list(verbose=True)
    print()
    print("="*80)
    with tarfile.open(tarfilename, "r") as tar:
        t = tar.getmembers()
        for m in t:
            print(m.name, m.size)

def make_tar_day(topdir):
    tarfilename = make_tarname(topdir)
    indent, files =  dir_recurse(topdir, dirtype = "slice", dirs=[], nocells=True)

    with tarfile.open(tarfilename, "w") as tar:
        for f in files:
            fp = Path(*f.parts[5:])
            tar.add(f, arcname=fp, recursive=False)
 


if __name__ == '__main__':
    topdir = "/Volumes/Pegasus_002/ManisLab_Data3/Kasten_Michael/Cerebellum"
    make_tar_day(topdir)
    get_tar_info(make_tarname(topdir))